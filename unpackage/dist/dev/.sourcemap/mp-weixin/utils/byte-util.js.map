{"version":3,"file":"byte-util.js","sources":["utils/byte-util.js"],"sourcesContent":["/**\n * 工具,一些数组和字符串的转换\n */\nconst app = getApp();\nimport logger from './logger.js'\n/**\n * 十六进制转化Array()\n */\nfunction hexStringToArray(s) {\n    var typedArray = new Uint8Array(\n        s.match(/[\\da-f]{2}/gi).map(function (h) {\n            return parseInt(h, 16);\n        })\n    );\n    if (typedArray.length > 1) {\n        return Array.apply(new Array(), typedArray);\n    } else {\n        return typedArray;\n    }\n}\nfunction string2buffer(str) {\n    // 首先将字符串转为16进制\n    let val = '';\n    for (let i = 0; i < str.length; i++) {\n        if (val === '') {\n            val = str.charCodeAt(i).toString(16);\n        } else {\n            val += str.charCodeAt(i).toString(16);\n        }\n    }\n    // 将16进制转化为ArrayBuffer\n    return new Uint8Array(\n        val.match(/[\\da-f]{2}/gi).map(function (h) {\n            return parseInt(h, 16);\n        })\n    ).buffer;\n}\n\n/**\n * 十六进制转化ArrayBuffer\n */\nfunction hexStringToArrayBuffer(s) {\n    var typedArray = new Uint8Array(\n        s.match(/[\\da-f]{2}/gi).map(function (h) {\n            return parseInt(h, 16);\n        })\n    );\n    return typedArray;\n}\n\n/**\n * 字符串转字节数组\n */\nfunction stringToBytes(str) {\n    var ch;\n    var st;\n    var re = [];\n    for (var i = 0; i < str.length; i++) {\n        ch = str.charCodeAt(i); // get char\n        st = []; // set up \"stack\"\n        do {\n            st.push(ch & 255); // push byte to stack\n            ch = ch >> 8; // shift value down by 1 byte\n        } while (ch);\n        // add stack contents to result\n        // done because chars have \"wrong\" endianness\n        re = re.concat(st.reverse());\n    }\n    // return an array of bytes\n    return re;\n}\n\n/**\n * 转化一个字节的数组\n */\nfunction shortToSingleBytes(s, asc) {\n    var buf = new Array(1);\n    buf[0] = s & 255;\n    return buf;\n}\n\n/**\n * 转化两个字节的数组\n */\nfunction shortToBytes(s, asc) {\n    var buf = new Array(2);\n    if (asc) {\n        // 高位在前\n        for (var i = buf.length - 1; i >= 0; i--) {\n            buf[i] = s & 255;\n            s >>= 8;\n        }\n    } else {\n        for (var i = 0; i < buf.length; i++) {\n            buf[i] = s & 255;\n            s >>= 8;\n        }\n    }\n    return buf;\n}\n\n/**\n * 转化4个字节数组\n */\nfunction intToBytes(s, asc) {\n    var buf = new Array(4);\n    if (asc) {\n        // 高位在前\n        for (var i = buf.length - 1; i >= 0; i--) {\n            buf[i] = s & 255;\n            s >>= 8;\n        }\n    } else {\n        for (var i = 0; i < buf.length; i++) {\n            buf[i] = s & 255;\n            s >>= 8;\n        }\n    }\n    return buf;\n}\n\n/**\n * crc校验\n * CRC_TABLE_XW:CRC余式表\n */\nfunction checkCRC_XW(CRC_TABLE_XW, buff, start, length) {\n    var crc = 65535;\n    for (var i = 0; i < length; i++) {\n        crc = (crc >>> 8) ^ CRC_TABLE_XW[(crc ^ buff[start + i]) & 255];\n    }\n    return crc;\n}\n\n/**\n * crc加密\n * CRC_TABLE_XW:CRC余式表\n */\nfunction crcEncrypt(CRC_TABLE_XW, content, header) {\n    var crc = checkCRC_XW(CRC_TABLE_XW, content, 0, content.length);\n    var crcByte = shortToBytes(crc, false);\n    var len = content.length + crcByte.length;\n    var lenByte = shortToBytes(len, true);\n    return header.concat(lenByte).concat(content).concat(crcByte);\n}\n\n/**\n * crc加密\n * CRC_TABLE_XW:CRC余式表\n */\nfunction crcEncrypt_KTQUpgrade(content) {\n    var crc = 0;\n    for (var i = 0; i < 128; i++) {\n        //crc = (crc >>> 8) ^ app.CRC_TABLE_XW2[(crc ^ content[3 + i]) & 0xff];\n        crc = crc ^ (content[3 + i] << 8);\n        for (var j = 0; j < 8; j++) {\n            if (crc & 32768) {\n                crc = (crc << 1) ^ 4129;\n            } else {\n                crc = crc << 1;\n            }\n        }\n    }\n    var crcByte = shortToBytes(crc, true);\n    return crcByte;\n}\n\n/**\n * ArrayBuffer转换为Hex\n */\nfunction buf2hex(buffer) {\n    // buffer is an ArrayBuffer\n    return Array.prototype.map.call(new Uint8Array(buffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\n/**\n * 数组转化int\n */\nfunction bytesToInt(b1, b2, b3, b4) {\n    return (b4 & 255) | ((b3 & 255) << 8) | ((b2 & 255) << 16) | ((b1 & 255) << 24);\n}\n\n/**\n * 转经纬度\n */\nfunction converTude2Double(bytes, start) {\n    var londu = bytes[start] & 255;\n    var lonfen1 = bytes[start + 1] & 255;\n    var lonfen2 = (bytes[start + 2] & 255) / 100;\n    var lonfen3 = (bytes[start + 3] & 255) / 10000;\n    var lond = (lonfen1 + lonfen2 + lonfen3) / 60;\n    return londu + lond;\n}\n\n/**\n * 数组转化int\n */\nfunction bytesToShort(b1, b2) {\n    return bytesToInt(0, 0, b1, b2);\n}\n\n//获取crc值传NO  其它传YES\nfunction getShortWith(data, asc) {\n    if (data == null) {\n        return 0;\n    }\n    //Byte* buf = (Byte *)[data bytes];\n    var length = data.length;\n    var r = 0;\n    if (!asc) {\n        for (var i = length - 1; i >= 0; i--) {\n            r <<= 8;\n            r |= data[i] & 255;\n        }\n    } else {\n        for (var i = 0; i < length; i++) {\n            r <<= 8;\n            r |= data[i] & 255;\n        }\n    }\n    return r;\n}\n\n/**\n * 十六进制字符串转字符串\n */\nfunction hexCharCodeToStr(hexCharCodeStr) {\n    var trimedStr = hexCharCodeStr.trim();\n    var rawStr = trimedStr.substr(0, 2).toLowerCase() === '0x' ? trimedStr.substr(2) : trimedStr;\n    var len = rawStr.length;\n    if (len % 2 !== 0) {\n        console.log('Illegal Format ASCII Code!');\n        return '';\n    }\n    var curCharCode;\n    var resultStr = [];\n    for (var i = 0; i < len; i = i + 2) {\n        curCharCode = parseInt(rawStr.substr(i, 2), 16); // ASCII Code Value\n        resultStr.push(String.fromCharCode(curCharCode));\n    }\n    return resultStr.join('');\n}\n\n/**\n * arraybuffer 转 string\n */\nfunction buf2string(buffer) {\n    var arr = Array.prototype.map.call(new Uint8Array(buffer), (x) => x);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += String.fromCharCode(arr[i]);\n    }\n    return str;\n}\nexport default {\n    // 十六进制转化Array()\n    hexStringToArrayBuffer: hexStringToArrayBuffer,\n    // 十六进制转化ArrayBuffer\n    hexStringToArray: hexStringToArray,\n    // 字符串转ArrayBuffer\n    string2buffer: string2buffer,\n    // 字符串转字节数组\n    stringToBytes: stringToBytes,\n    // 转化一个字节的数组\n    shortToSingleBytes: shortToSingleBytes,\n    // 转化两个字节的数组\n    shortToBytes: shortToBytes,\n    // 转化4个字节数组\n    intToBytes: intToBytes,\n    // crc加密\n    crcEncrypt: crcEncrypt,\n    // ArrayBuffer转换为Hex\n    buf2hex: buf2hex,\n    //数组转化int\n    bytesToInt: bytesToInt,\n    //数组转化short\n    bytesToShort: bytesToShort,\n    //转经纬度\n    converTude2Double: converTude2Double,\n    //数组转化short\n    getShortWith: getShortWith,\n    //十六进制转字符串\n    hexCharCodeToStr: hexCharCodeToStr,\n    //arraybuffer 转 string\n    buf2string: buf2string,\n    // crc加密(开通器升级)\n    crcEncrypt_KTQUpgrade: crcEncrypt_KTQUpgrade\n};\n"],"names":["uni"],"mappings":"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"}